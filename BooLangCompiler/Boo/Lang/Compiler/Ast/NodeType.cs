using System;

namespace Boo.Lang.Compiler.Ast
{
	[Serializable]
	public enum NodeType
	{
		CompileUnit,
		TypeMemberStatement,
		ExplicitMemberInfo,
		SimpleTypeReference,
		ArrayTypeReference,
		CallableTypeReference,
		GenericTypeReference,
		GenericTypeDefinitionReference,
		CallableDefinition,
		NamespaceDeclaration,
		Import,
		Module,
		ClassDefinition,
		StructDefinition,
		InterfaceDefinition,
		EnumDefinition,
		EnumMember,
		Field,
		Property,
		Event,
		Local,
		BlockExpression,
		Method,
		Constructor,
		Destructor,
		ParameterDeclaration,
		GenericParameterDeclaration,
		Declaration,
		Attribute,
		StatementModifier,
		GotoStatement,
		LabelStatement,
		Block,
		DeclarationStatement,
		MacroStatement,
		TryStatement,
		ExceptionHandler,
		IfStatement,
		UnlessStatement,
		ForStatement,
		WhileStatement,
		BreakStatement,
		ContinueStatement,
		ReturnStatement,
		YieldStatement,
		RaiseStatement,
		UnpackStatement,
		ExpressionStatement,
		OmittedExpression,
		ExpressionPair,
		MethodInvocationExpression,
		UnaryExpression,
		BinaryExpression,
		ConditionalExpression,
		ReferenceExpression,
		MemberReferenceExpression,
		GenericReferenceExpression,
		QuasiquoteExpression,
		StringLiteralExpression,
		CharLiteralExpression,
		TimeSpanLiteralExpression,
		IntegerLiteralExpression,
		DoubleLiteralExpression,
		NullLiteralExpression,
		SelfLiteralExpression,
		SuperLiteralExpression,
		BoolLiteralExpression,
		RELiteralExpression,
		SpliceExpression,
		SpliceTypeReference,
		SpliceMemberReferenceExpression,
		SpliceTypeMember,
		SpliceTypeDefinitionBody,
		SpliceParameterDeclaration,
		ExpressionInterpolationExpression,
		HashLiteralExpression,
		ListLiteralExpression,
		CollectionInitializationExpression,
		ArrayLiteralExpression,
		GeneratorExpression,
		ExtendedGeneratorExpression,
		Slice,
		SlicingExpression,
		TryCastExpression,
		CastExpression,
		TypeofExpression,
		CustomStatement,
		CustomExpression,
		StatementTypeMember
	}
}
